library(ggplot2)
excel_sheets("DataRepo.xlsx")
deliveries <- read_excel("DataRepo.xlsx", "OnTimeDelivery")
## Subset into two test sets
samplePop <- subset(deliveries, as.Date(deliveries$Month) > "2013-12-01")
hypPop <- subset(deliveries, as.Date(deliveries$Month) < "2013-12-01")
## Sample size
n <- nrow(samplePop)
## The sample and hypothesis mean
xbar <- mean(samplePop$Late)  # sample mean
mu0 <- mean(hypPop$Late)  # hypothesized value
# The sample and population standard deviations
s <- sd(samplePop$Late)  # sample stdev
sigma <- sd(deliveries$Late)  # population stdev
# Compute the t and z test scores since we know the variance
z <- (xbar - mu0) / (sigma / sqrt(n))  # Compute the z-test statistic
t <- (xbar - mu0) / (s / sqrt(n))  # Compute the t-test statistic
## Known population standard deviation BUT sample size is below 30 observations
# Use t-score:
pval_t <- 2 * pt(t, df = n - 1)  # Compute the p-value based on t
## If we had a larger sample size, the z score would show much more significance
pval_z <- 2 * pt(z, df = n - 1)
rm(list = ls())
defects <- read_excel("DataRepo.xlsx", "Defects")
defects
box <- ggplot(defects, aes(x = year, y = count)) + geom_boxplot()
ggplot(box)
box
diamonds
defects <- defects[-"Month"]
defects <- defects[ ,-which(names(defects) %in% c("Month"))]
defects
library(dplyr)
library(tidyr)
?gather
library(readxl)
library(dplyr)
library(tidyr)
library(ggplot2)
excel_sheets("DataRepo.xlsx")
defects <- read_excel("DataRepo.xlsx", "Defects")
defects <- defects[ ,-which(names(defects) %in% c("Month"))]
rm(list = ls())
df <- read_excel("DataRepo.xlsx", "Defects")
defects <- cbind.data.frame(df[1], df[2])
defects
df <- df[ ,-which(names(df) %in% c("Month"))]
defects <- cbind.data.frame(df[1], df[2])
defects
df
defects <- rbind.data.frame(df[1], df[2])
df <- read_excel("DataRepo.xlsx", "Defects")
df <- df[ ,1]
df
df <- read_excel("DataRepo.xlsx", "Defects")
df <- df[ ,-1]
df
col_1 <- df[1]
col_2 <- df[2]
col_3 <- df[3]
col_4 <- df[4]
samplePop <- data.frame(defectCounts=integer())
?rbind
samplePop <- data.frame(defectCounts=integer())
for (i in 1:ncol(df)-1) {
temp <- df[i]
name(temp) <- "defectsCount"
samplePop <- rbind.data.frame(temp)
}
samplePop <- data.frame(defectCounts=integer())
for (i in 1:ncol(df)-1) {
temp <- df[i]
names(temp) <- "defectsCount"
samplePop <- rbind.data.frame(temp)
}
samplePop <- data.frame(defectCounts=integer())
for (i in 1:ncol(df)-1) {
temp <- df[i]
print(names(temp))
# names(temp) <- "defectsCount"
# samplePop <- rbind.data.frame(temp)
}
samplePop <- data.frame(defectCounts=integer())
for (i in 1:ncol(df)-1) {
temp <- df[i]
print(names(temp))
names(temp) <- "defectsCount"
samplePop <- rbind.data.frame(temp)
}
temp <- df[1]
temp
class(temp)
df <- as.data.frame(read_excel("DataRepo.xlsx", "Defects"))
class(temp)
colnames(temp)
colnames(temp) <- "temp"
colnames(temp)
df <- as.data.frame(read_excel("DataRepo.xlsx", "Defects"))
df <- df[ ,-1]
samplePop <- data.frame(defectCounts=integer())
for (i in 1:ncol(df)-1) {
temp <- df[i]
print(names(temp))
colnames(temp) <- "defectsCount"
samplePop <- rbind.data.frame(temp)
}
samplePop <- data.frame(defectCounts=integer())
for (i in 1:ncol(df)-1) {
temp <- df[i]
print(names(temp[i]))
colnames(temp[i]) <- "defectsCount"
samplePop <- rbind.data.frame(temp)
}
rm(list = ls())
df <- read_excel("DataRepo.xlsx", "Defects")
df <- df[ ,-1]
samplePop <- data.frame(defectCounts=integer())
i=1
temp <- df[i]
colnames(temp[i]) <- "defectsCount"
samplePop <- rbind.data.frame(temp)
View(samplePop)
colnames(temp[i])
colnames(temp[i]) <- "defectsCount"
temp
samplePop <- data.frame(defectCounts=integer())
for (i in 1:ncol(df)-1) {
temp <- df[i]
colnames(temp) <- "defectsCount"
samplePop <- rbind.data.frame(temp)
}
samplePop <- data.frame(defectCounts=integer())
for (i in 1:ncol(df)-1) {
temp <- df[i]
# colnames(temp) <- "defectsCount"
samplePop <- rbind(temp)
}
View(samplePop)
c(df)
class(c(df))
as.matrix(df)
df <- as.atrix(read_excel("DataRepo.xlsx", "Defects"))
df <- as.matrix(read_excel("DataRepo.xlsx", "Defects"))
df <- df[ ,-1]
df <- as.matrix(df[ ,-1])
df <- read_excel("DataRepo.xlsx", "Defects")
df <- as.matrix(df[ ,-1])
df
c(df)
?c
c(df)
df <- c(as.matrix(df[ ,-1]))
summary(df)
stats <- summary(df)
stats
stats[1]
stats[2]
stats[3]
stats[4]
stats[5]
stats[6]
rm(list = ls())
df <- read_excel("DataRepo.xlsx", "Defects")
df <- c(as.matrix(df[ ,-1]))
stats <- summary(df)
df <- read_excel("DataRepo.xlsx", "Defects")
df
newSample <- c(as.matrix(data[ ,6]))
rm(list = ls())
data <- read_excel("DataRepo.xlsx", "Defects")
oldSample <- c(as.matrix(data[ ,2:5]))
newSample <- c(as.matrix(data[ ,6]))
sigma <- sd(c(as.matrix(data[ ,2:6])))  # population stdev
s <- sd(samplePop$Late)  # sample stdev
deliveries <- read_excel("DataRepo.xlsx", "OnTimeDelivery")
samplePop <- subset(deliveries, as.Date(deliveries$Month) > "2013-12-01")
hypPop <- subset(deliveries, as.Date(deliveries$Month) < "2013-12-01")
s <- sd(newSample)  # sample stdev
c(as.matrix(data[ ,2:6]))
length(c(as.matrix(data[ ,2:6])))
rm(list = ls())
n <- nrow(newSample)
rm(list = ls())
data <- read_excel("DataRepo.xlsx", "Defects")
oldSample <- c(as.matrix(data[ ,2:5]))
newSample <- c(as.matrix(data[ ,6]))
n <- nrow(newSample)
## Compute sample and hypothesized means
xbar <- mean(newSample)  # sample mean
mu0 <- mean(oldSample)  # hypothesized mean
## The sample and population standard deviations
s <- sd(newSample)  # sample stdev
sigma <- sd(c(as.matrix(data[ ,2:6])))  # population stdev
## Compute the t and z test scores since we know the variance
z <- (xbar - mu0) / (sigma / sqrt(n))  # Compute the z-test statistic
t <- (xbar - mu0) / (s / sqrt(n))  # Compute the t-test statistic
n <- length(newSample)
rm(list = ls())
# install.packages("readxl", dependencies = T)
library(readxl)
# excel_sheets("DataRepo.xlsx")
## Import data subset into vectors representing the historical and new samples
data <- read_excel("DataRepo.xlsx", "Defects")
oldSample <- c(as.matrix(data[ ,2:5]))
newSample <- c(as.matrix(data[ ,6]))
n <- length(newSample)
## Compute sample and hypothesized means
xbar <- mean(newSample)  # sample mean
mu0 <- mean(oldSample)  # hypothesized mean
## The sample and population standard deviations
s <- sd(newSample)  # sample stdev
sigma <- sd(c(as.matrix(data[ ,2:6])))  # population stdev
## Compute the t and z test scores since we know the variance
z <- (xbar - mu0) / (sigma / sqrt(n))  # Compute the z-test statistic
t <- (xbar - mu0) / (s / sqrt(n))  # Compute the t-test statistic
pval_t <- 2 * pt(t, df = n - 1)  # Compute the p-value based on t
## If we had a larger sample size, the z score would show much more significance
pval_z <- 2 * pt(z, df = n - 1)
rm(list = ls())
library(readxl)
excel_sheets("DataRepo.xlsx")
data <- read_excel("DataRepo.xlsx", "Transmission")
data
current <- c(as.matrix(data[, 1]))
processA <- c(as.matrix(data[ ,2]))
processB <- c(as.matrix(data[ ,3]))
rm(list = ls())
data <- read_excel("DataRepo.xlsx", "Transmission")
current <- c(as.matrix(data[ ,1]))
process_A <- c(as.matrix(data[ ,2]))
process_B <- c(as.matrix(data[ ,3]))
xbar_A <- mean(process_A)
sigma_A <- sd(c(as.matrix(data[ ,1:2])))
sigma_B <- sd(c(as.matrix(data[ ,c(1,3)])))
z <- (xbar - mu0) / (sigma / sqrt(n))  # Compute the z-test statistic
z_B <- (xbar_B - mu0) / (sigma_B / sqrt(n))  # z-test statistic for Test B
rm(list = ls())
# install.packages("readxl", dependencies = T)
library(readxl)
# excel_sheets("DataRepo.xlsx")
## Import data subset into vectors representing the historical and new samples
data <- read_excel("DataRepo.xlsx", "Transmission")
current <- c(as.matrix(data[ ,1]))
process_A <- c(as.matrix(data[ ,2]))
process_B <- c(as.matrix(data[ ,3]))
## Sample size
n <- 30  # Size of both tests is 30
## Null Hypothesis 1 and 2:
# There is no significant difference between the current
# process and either Process A (1) or Process B (2) i.e.
# the sample mean equals the hypothesized mean.
## Mean of both samples and the hypothesis
mu0 <- mean(current)  # Hypothesized mean
xbar_A <- mean(process_A)  # Sample mean for Test A
xbar_B <- mean(process_B)  # Sample mean for Test B
## StDev of populations for each test
sigma_A <- sd(c(as.matrix(data[ ,1:2])))
sigma_B <- sd(c(as.matrix(data[ ,c(1,3)])))
## Using z score since the sample size is 30 and the variance is known
z_A <- (xbar_A - mu0) / (sigma_A / sqrt(n))  # z-test statistic for Test A
z_B <- (xbar_B - mu0) / (sigma_B / sqrt(n))  # z-test statistic for Test B
pVal_A <- 2 * pt(z_A, df = n - 1)
pVal_B <- 2 * pt(z_B, df = n - 1)
rm(list = ls())
excel_sheets("DataRepo.xlsx")
data <- read_excel("DataRepo.xlsx", "EmployeeRetenion")
data
data$gender_bin <- ifelse(data$Gender, 1, 0)
data
data$gender_bin <- ifelse(data$Gender = "F", 1, 0)
data$gender_bin <- ifelse(data$Gender == "F", 1, 0)
data$gender_bin <- ifelse(data$Gender == "F", 1, 0)
data
data$grad_bin <- ifelse(data$'College Grad' == "Y", 1, 0)
data
data$local_bin <- ifelse(data$Local == "Y", 1, 0)
data
summary(data)
sd(data[,"local_bin"])
yearsPLE <- data[ ,1]
yearsPLE <- c(as.matrix(data[ ,1]))
gender_bin <- c(as.matrix(data[ ,8]))
grad_bin <- c(as.matrix(data[ ,9]))
local_bin <- c(as.amtrix(data[ ,10]))
local_bin <- c(as.matrix(data[ ,10]))
data
mu0 <- mean(yearsPLE)
mu0 <- mean(yearsPLE)
xbar_gender <- mean(gender_bin)
xbar_grad <- mean(grad_bin)
xbar_local <- mean(local_bin)
sigma <- c(as.matrix(data[ ,c(1,8:10)]))
sigma
sigma_gender <- sd(c(as.matrix(data[ ,c(1,8)])))
sigma_grad <- sd(c(as.matrix(data[ ,c(1,9)])))
sigma_local <- sd(c(as.matrix(data[ ,c(1,10)])))
z_gender <- (xbar_gender - mu0) / (sigma_gender / sqrt(n))  # z-test statistic for gender test
z_grad <- (xbar_grad - mu0) / (sigma_grad / sqrt(n))  # z-test statistic for grad test
n <- 40  # Sample size is always 40
z_gender <- (xbar_gender - mu0) / (sigma_gender / sqrt(n))  # z-test statistic for gender test
z_grad <- (xbar_grad - mu0) / (sigma_grad / sqrt(n))  # z-test statistic for grad test
z_local <- (xbar_local - mu0) / (sigma_local / sqrt(n))  # z-test statistic for local test
?pt
pVal_gender <- 2 * pt(z_gender, df = n - 1)
pVal_grad <- 2 * pt(z_grad, df = n - 1)
pVal_local <- 2 * pt(z_local, df = n - 1)
rm(list = ls())
excel_sheets("DataRepo.xlsx")
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey
plant.df
survey
PlantGrowth
rm(list = ls())
data <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
data$Region <- as.factor(x = data$Region)
names(data)
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey$Region <- as.factor(x = survey$Region)
rm(list = ls())
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey$Region <- as.factor(x = survey$Region)
library(ggplot2)
ggplot(survey, aes(x = Region, y = Quality)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Region") +
ylab("Survey Responses on Quality")
summary(survey[2])
names(survey)
ggplot(survey, aes(x = Region, y = Quality)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Quality")
paste("Name", "Here")
?paste
paste("Name", "Here", sep = "")
paste("Name", "Here", sep = "") <- 1
var <- paste("Name", "Here", sep = "")
var
plot_i <- paste("boxPlot", "_", i, sep = "")
i = 1
plot_i <- paste("boxPlot", "_", i, sep = "")
rm(list = ls())
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey$Region <- as.factor(x = survey$Region)
names(survey)
ggplot(survey, aes(x = Region, y = 'Ease of Use')) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Quality")
survey
colnames(survey)
colnames(survey)[3] <- "EaseOfUse"
colnames(survey)
ggplot(survey, aes(x = Region, y = EaseOfUse)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Quality")
box.quality <- ggplot(survey, aes(x = Region, y = Quality)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Quality")
box.ease <- ggplot(survey, aes(x = Region, y = EaseOfUse)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Quality")
box.price <- ggplot(survey, aes(x = Region, y = Price)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Quality")
box.service <- ggplot(survey, aes(x = Region, y = Service)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Quality")
?plot_grid
?grid.arrange
library(gridExtra)
?grid.arrange
grid.arrange(box.quality, box.ease, box.price, box.service, ncol = 2)
rm(list = ls())
# install.packages("readxl", dependencies = T)
library(readxl)
library(ggplot2)
library(gridExtra)
# excel_sheets("DataRepo.xlsx")
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey$Region <- as.factor(x = survey$Region)
colnames(survey)[3] <- "EaseOfUse"
box.quality <- ggplot(survey, aes(x = Region, y = Quality)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Quality") +
ggtitle("Quality")
box.ease <- ggplot(survey, aes(x = Region, y = EaseOfUse)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Ease of Use") +
ggtitle("Ease of Use")
box.price <- ggplot(survey, aes(x = Region, y = Price)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Quality") +
ggtitle("Price")
box.service <- ggplot(survey, aes(x = Region, y = Service)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Survey Responses on Service") +
ggtitle("Service")
grid.arrange(box.quality, box.ease, box.price, box.service, ncol = 2)
rm(list = ls())
# install.packages("readxl", dependencies = T)
library(readxl)
library(ggplot2)
library(gridExtra)
# excel_sheets("DataRepo.xlsx")
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey$Region <- as.factor(x = survey$Region)
colnames(survey)[3] <- "EaseOfUse"
box.quality <- ggplot(survey, aes(x = Region, y = Quality)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Responses to Quality") +
ggtitle("Quality")
box.ease <- ggplot(survey, aes(x = Region, y = EaseOfUse)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Responses to Ease of Use") +
ggtitle("Ease of Use")
box.price <- ggplot(survey, aes(x = Region, y = Price)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Responses to Quality") +
ggtitle("Price")
box.service <- ggplot(survey, aes(x = Region, y = Service)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Responses to Service") +
ggtitle("Service")
grid.arrange(box.quality, box.ease, box.price, box.service, ncol = 2)
png("boxPlots.png")
?png
png("boxPlots.png")
png("boxPlots.png")
grid.arrange(box.quality, box.ease, box.price, box.service, ncol = 2)
dev.off()
dev.off()
dev.off()
rm(list = ls())
# install.packages("readxl", dependencies = T)
library(readxl)
library(ggplot2)
library(gridExtra)
# excel_sheets("DataRepo.xlsx")
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey$Region <- as.factor(x = survey$Region)
colnames(survey)[3] <- "EaseOfUse"
box.quality <- ggplot(survey, aes(x = Region, y = Quality)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Responses to Quality") +
ggtitle("Quality")
box.ease <- ggplot(survey, aes(x = Region, y = EaseOfUse)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Responses to Ease of Use") +
ggtitle("Ease of Use")
box.price <- ggplot(survey, aes(x = Region, y = Price)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Responses to Quality") +
ggtitle("Price")
box.service <- ggplot(survey, aes(x = Region, y = Service)) +
geom_boxplot(fill = "grey80", colour = "blue") +
scale_x_discrete() + xlab("Market Regions") +
ylab("Responses to Service") +
ggtitle("Service")
png("boxPlots.png")
grid.arrange(box.quality, box.ease, box.price, box.service, ncol = 2)
dev.off()
rm(list = ls())
library(readxl)
excel_sheets("DataRepo.xlsx")
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey
survey <- c(as.matrix(survey[ ,c(-1,2:5)]))
survey <- survey[ ,-1]
survey <- survey[ ,-1]
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey <- survey[ ,-1]
survey <- c(as.matrix(survey[ ,1:4]))
survey <- read_excel("DataRepo.xlsx", "CustomerSurvey2014")
survey <- survey[ ,-1]
vector <- c(as.matrix(survey[ ,1:4]))
rep
?rep
?factor
names(survey)
groups <- factor(rep(c("quality","easeOfUse","price","service"), each = 200))
groups +
groups
bartlett.test(vector, groups)
?qchisp
qchisq()
qchisq(0.95, 3)
?qchisq
qchisq(0.950, 3)
variance_test <- bartlett.test(vector, groups)
chi_sq_test <- qchisq(0.950, 3)
variance_test
variance_test[1]
fligner <- fligner.test(vector, groups)
fligner
