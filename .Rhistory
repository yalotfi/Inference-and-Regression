## T-Stats
t.grad <- (mu.edyY - mu.eduN) / (s.eduY / sqrt(n))
t.half.alpha <- qt(1 - alpha / 2, df = n - 1)
## Test Hypothesis with Critical Values and P-Value
criticalVals <- c(-t.half.alpha, t.half.alpha)
pVal.grad <- 2 * pt(t.grad, df = n - 1)
t.grad < criticalVals[1] || t.grad > criticalVals[2]  # TRUE
pVal.grad <= alpha  # TRUE
## Conclusion:
## Both solutions verify that the null hypothesis cannot be rejected
rm(list = ls())
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
names(data)[6] <- "CollegeGrad"
alpha <- 0.05
years.eduY <- subset(data, CollegeGrad=="Y")[ ,1]
years.eduN <- subset(data, CollegeGrad=="N")[ ,1]
n <- length(years.eduY)  # Sample size
mu.edyY <- mean(years.eduY)  # Sample mean
mu.eduN <- mean(years.eduN)  # Hypothesized mean
s.eduY <- sd(years.eduY)  # Sample StDev
t.grad <- (mu.edyY - mu.eduN) / (s.eduY / sqrt(n))
t.half.alpha <- qt(1 - alpha / 2, df = n - 1)
criticalVals <- c(-t.half.alpha, t.half.alpha)
pVal.grad <- 2 * pt(t.grad, df = n - 1)
t.grad < criticalVals[1] || t.grad > criticalVals[2]  # TRUE
pVal.grad <= alpha  # TRUE
rm(list = ls())
data <- read_excel("DataRepo.xlsx", "EmployeeRetenion")
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
data$gender_bin <- ifelse(data$Gender == "F", 1, 0)
data$grad_bin <- ifelse(data$'College Grad' == "Y", 1, 0)
data$local_bin <- ifelse(data$Local == "Y", 1, 0)
data
?write.csv
write.csv(data, "testRetention.csv")
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
years.m <- subset(data, Gender=="M")[ ,1]
years.f <- subset(data, Gender=="F")[ ,1]
years.eduY <- subset(data, CollegeGrad=="Y")[ ,1]
years.eduN <- subset(data, CollegeGrad=="N")[ ,1]
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
names(data)[6] <- "CollegeGrad"
alpha <- 0.05
years.eduY <- subset(data, CollegeGrad=="Y")[ ,1]
years.eduN <- subset(data, CollegeGrad=="N")[ ,1]
rm(list = ls())
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
years.locY <- subset(data, Local=="Y")[ ,1]
years.locN <- subset(data, Local=="N")[ ,1]
rm(list = ls())
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
alpha <- 0.05
years.m <- subset(data, Gender=="M")[ ,1]
years.f <- subset(data, Gender=="F")[ ,1]
n <- length(years.m)  # Sample size
mu.m <- mean(years.m)  # Sample mean
mu.f <- mean(years.f)  # Hypothesized mean
s.m <- sd(years.m)  # Sample StDev
## T-Stats
t.gender <- (mu.m - mu.f) / (s.m / sqrt(n))
t.half.alpha <- qt(1 - alpha / 2, df = n - 1)
## Test Hypothesis with Critical Values and P-Value
criticalVals <- c(-t.half.alpha, t.half.alpha)
pVal.gender <- 2 * pt(t.gender, df = n - 1)
## Should we Reject?
t.gender < criticalVals[1] || t.gender > criticalVals[2]  # TRUE
pVal.gender <= alpha  # TRUE
## Conclusion:
## Both solutions verify that the null hypothesis cannot be rejected
rm(list = ls())
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
names(data)[6] <- "CollegeGrad"
alpha <- 0.05
years.eduY <- subset(data, CollegeGrad=="Y")[ ,1]
years.eduN <- subset(data, CollegeGrad=="N")[ ,1]
## Compute T-stat paramters
n <- length(years.eduY)  # Sample size
mu.edyY <- mean(years.eduY)  # Sample mean
mu.eduN <- mean(years.eduN)  # Hypothesized mean
s.eduY <- sd(years.eduY)  # Sample StDev
## T-Stats
t.grad <- (mu.edyY - mu.eduN) / (s.eduY / sqrt(n))
t.half.alpha <- qt(1 - alpha / 2, df = n - 1)
## Test Hypothesis with Critical Values and P-Value
criticalVals <- c(-t.half.alpha, t.half.alpha)
pVal.grad <- 2 * pt(t.grad, df = n - 1)
## Should we Reject?
t.grad < criticalVals[1] || t.grad > criticalVals[2]  # TRUE
pVal.grad <= alpha  # TRUE
## Conclusion:
## Both solutions verify that the null hypothesis cannot be rejected
rm(list = ls())
# install.packages("readxl", dependencies = T)
library(readxl)
## Set working directory
# getwd() set to the project file
setwd(paste(getwd(), "/Inference/EmployeeRetention", sep = ""))
## Import data and create binary classes for target variables
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
alpha <- 0.05
## Null Hypothesis:
## Mean years at PLE of male employees equal to mean years at PLE of female employees
## Create vectors of data to compare
years.m <- subset(data, Gender=="M")[ ,1]
years.f <- subset(data, Gender=="F")[ ,1]
## Compute T-stat paramters
n <- length(years.m)  # Sample size
mu.m <- mean(years.m)  # Sample mean
mu.f <- mean(years.f)  # Hypothesized mean
s.m <- sd(years.m)  # Sample StDev
## T-Stats
t.gender <- (mu.m - mu.f) / (s.m / sqrt(n))
t.half.alpha <- qt(1 - alpha / 2, df = n - 1)
## Test Hypothesis with Critical Values and P-Value
criticalVals <- c(-t.half.alpha, t.half.alpha)
pVal.gender <- 2 * pt(t.gender, df = n - 1)
rm(list = ls())
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
alpha <- 0.05
## Null Hypothesis:
## Mean years at PLE for local employees to mean years at PLE for remote employees
## Create Vectors
years.locY <- subset(data, Local=="Y")[ ,1]
years.locN <- subset(data, Local=="N")[ ,1]
## Compute params
n <- length(years.locY)  # Sample size
mu.locY <- mean(years.locY)  # Sample mean
mu.locN <- mean(years.locN)  # Hypothesized mean
s.locY <- sd(years.locY)  # Sample StDev
## T-Stats
t.local <- (mu.locY - mu.locN) / (s.locY / sqrt(n))
t.half.alpha <- qt(1 - alpha / 2, df = n - 1)
## Test Hypothesis with Critical Values and P-Value
criticalVals <- c(-t.half.alpha, t.half.alpha)
pVal.local <- 2 * pt(t.local, df = n - 1)
## Should we Reject?
t.local < criticalVals[1] || t.local > criticalVals[2]  # TRUE
pVal.local <= alpha  # FALSE
rm(list = ls())
data <- read_excel("../DataRepo.xlsx", "EmployeeRetenion")
alpha <- 0.05
years.locY <- subset(data, Local=="Y")[ ,1]
years.locN <- subset(data, Local=="N")[ ,1]
n <- length(years.locY)  # Sample size
mu.locY <- mean(years.locY)  # Sample mean
mu.locN <- mean(years.locN)  # Hypothesized mean
s.locY <- sd(years.locY)  # Sample StDev
t.local <- (mu.locY - mu.locN) / (s.locY / sqrt(n))
t.half.alpha <- qt(1 - alpha / 2, df = n - 1)
criticalVals <- c(-t.half.alpha, t.half.alpha)
pVal.local <- 2 * pt(t.local, df = n - 1)
pVal.local
getwd()
setwd(../../Regression)
setwd("../../Regression")
getwd()
excel_sheets("DataRegression.xlsx")
data <- read_excel("DataRegression.xlsx", "Defects")
rm(list = ls())
data <- read_excel("DataRegression.xlsx", "Defects")
getwd()
data <- read_excel("DataRegression.xlsx", "Defects")
library(readxl)
data <- read_excel("DataRegression.xlsx", "Defects")
getwd()
setwd(paste(getwd(), "/Regression", sep = ""))  # move into regression folder
data <- read_excel("DataRegression.xlsx", "Defects")
data
excel_sheets("DataRegression.xlxs")
getwd()
excel_sheets("DataRegression.xlsx")
data <- read_excel("DataRegression.xlsx", "EmployeeRetenion")
hist
?hist
hist(data[ ,2])
View(data)
rm(list = ls())
data <- read_excel("DataRegression.xlsx", "Defects")
hist(data[ ,2])
data
for (i in 2:ncol(data)) {
hist(data[ ,i])
}
names(data)
for (i in 2:ncol(df)) {
hist(df[ ,i], main = names(df)[i])
}
rm(list = ls())
df <- read_excel("DataRegression.xlsx", "Defects")
for (i in 2:ncol(df)) {
hist(df[ ,i], main = names(df)[i])
}
for (i in 2:ncol(df)) {
hist(df[ ,i], main = names(df)[i], xlab = "Dfective Units")
}
head(data)
head(df)
?plot
library(ggplot2)
ggplot(df, aes(x = df[ ,1], y = df[ ,2]))
df
/read_excel()
?read_excel()
seq(1,12,1)
ggplot(df, aes(x = seq(1,12,1), y = df[ ,2]))
df$MonthID <- seq(1,12,1)
df
ggplot(df, aes(x = MonthID, y = '2010'))
ggplot(df, aes(x = MonthID, y = df[,2]))
names(df) <- c("MonthName", "y2010", "y2011", "y2012", "y2013", "y2014")
df
names(df) <- c("MonthName", "y2010", "y2011", "y2012", "y2013", "y2014", "MonthID")
df
ggplot(df, aes(x = MonthID, y = MonthID))
ggplot(df, aes(x = MonthID, y = y2010))
ggplot(df, aes(x = MonthID, y = y2010)) + geom_point(shape = 1)
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) +
geom_smooth(method = lm)
df$MonthName <- as.factor(df$MonthName)
ggplot(df, aes(x = MonthName, y = y2010)) +
geom_point(shape = 1) +
geom_smooth(method = lm)
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) +
geom_smooth(method = lm)
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) +
stat_summary(fun.data=mean_cl_normal) +
geom_smooth(method = lm)
?stat_summary
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) +
geom_smooth(method = lm)
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_line() +
geom_smooth(method = lm)
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) +
geom_line() +
geom_smooth(method = lm)
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) +
geom_line() +
geom_smooth(method = lm)
?geom_label
?aes
xlab
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm) +
xlab("Month") + ylab("Defect Counts")
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
png(DefectPlot.png)
png("DefectPlot.png")
plot <- ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
dev.off()
setwd(paste(getwd(), "/Regression", sep = ""))  # move into regression folder
source('C:/Users/yalot/OneDrive/WM/Business Classes/BUAD467 Applied Predictive Analytics/Assignment03/Regression/predictDefects.R', echo=TRUE)
df <- read_excel("DataRegression.xlsx", "Defects")
names(df) <- c("MonthName", "y2010", "y2011", "y2012", "y2013", "y2014", "MonthID")
df$MonthName <- as.factor(df$MonthName)
df$MonthID <- seq(1,12,1)
png("DefectPlot.png")
plot <- ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
dev.off()
plot <- ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
png("DefectPlot.png")
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
dev.off()
df
df <- read_excel("DataRegression.xlsx", "Defects")
names(df) <- c("MonthName", "y2010", "y2011", "y2012", "y2013", "y2014", "MonthID")
df$MonthName <- as.factor(df$MonthName)
df$MonthID <- seq(1,12,1)
rm(list = ls())
df <- read_excel("DataRegression.xlsx", "Defects")
df
names(df) <- c("MonthName", "y2010", "y2011", "y2012", "y2013", "y2014", "MonthID")
names(df)
df$MonthID <- seq(1,12,1)
df$MonthName <- as.factor(df$MonthName)
df <- read_excel("DataRegression.xlsx", "Defects")
df$MonthID <- seq(1,12,1)
names(df) <- c("MonthName", "y2010", "y2011", "y2012", "y2013", "y2014", "MonthID")
df$MonthName <- as.factor(df$MonthName)
png("DefectPlot.png")
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
dev.off()
rm(list = ls())
data <- read_excel("DataRegression.xlsx", "EmployeeRetenion")
data
summary(data[1:4])
data[ ,1:4]
rm(list = ls())
df <- df[ ,1:4]
df <- read_excel("DataRegression.xlsx", "EmployeeRetenion")
df <- df[ ,1:4]
head(df)
summary(df)
for (i in 2:ncol(df)) {
hist(df[i])
}
for (i in 2:ncol(df)) {
hist(df[ ,i])
}
for (i in 2:ncol(df)) {
hist(df[ ,i], main(names(df)[i]))
}
for (i in 2:ncol(df)) {
hist(df[ ,i], main = (names(df)[i]))
}
?qplot
for (i in 2:ncol(df)) {
qplot(x = df[ ,i], main = (names(df)[i]))
}
for (i in 2:ncol(df)) {
qplot(x = df[ ,i], main = (names(df)[i]), geom = "histogram")
}
for (i in 2:ncol(df)) {
qplot(x = df[ ,i], main = (names(df)[i]), geom="histogram")
}
for (i in 2:ncol(df)) {
# qplot(x = df[ ,i], main = (names(df)[i]), geom="histogram")
ggplot(df, aes(x = df[ ,i])) + geom_histogram()
}
ggplot(df, aes(x = df$YrsEducation)) + geom_histogram()
for (i in 2:ncol(df)) {
# qplot(x = df[ ,i], main = (names(df)[i]), geom="histogram")
col <- df[ ,i]
ggplot(df, aes(x = col)) + geom_histogram()
}
library(reshape2)
ggplot(melt(df), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 2) +
geom_histogram(binwidth = .5)
ggplot(melt(df[ ,2:ncol(df)]), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 2) +
geom_histogram(binwidth = .5)
ggplot(melt(df[ ,2:ncol(df)]), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 1) +
geom_histogram(binwidth = .5)
ggplot(melt(df[ ,2:ncol(df)]), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 2) +
geom_histogram(binwidth = .5)
png("histRetention.png")
ggplot(melt(df[ ,2:ncol(df)]), aes(x = value)) +
facet_wrap(~ variable, scales = "free", ncol = 2) +
geom_histogram(binwidth = .5)
dev.off()
?pairs
names(df)
df <- read_excel("DataRegression.xlsx", "EmployeeRetenion")
df <- df[ ,1:4]
names(df)[3] <- "GPA"
pairs(~YearsPLE+YrsEducation+GPA+Age, data = df, main = "Scatter Plot Matrix")
pairs(~YrsEducation+GPA+Age, data = df, main = "Scatter Plot Matrix")
summary(df)
png("scatterMatrixRetention.png")
pairs(~YrsEducation+GPA+Age, data = df, main = "Scatter Plot Matrix")
dev.off()
fit <- lm(YearsPLE ~ YrsEducation + GPA + Age)
?lm
fit <- lm(YearsPLE ~ YrsEducation + GPA + Age, data = df)
fit
summary(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
coefficients(fit)
vif(fit)
library(car)
vif(fit)
sqrt(vif(fit))
summary(fit)
fit <- lm(YearsPLE ~ Age, data = df)
summary(fit)
vif(fit)
fit <- lm(YearsPLE ~ GPA, data = df)
summary(fit)
plot(df[ ,1], df[ ,3])
plot(df[ ,1], df[ ,4])
plot(df[ ,1], df[ ,2])
layout(matrix(c(1,1)))
plot(df[ ,1], df[ ,2])
pairs(~YearsPLE+YrsEducation+GPA+Age, data = df, main = "Scatter Plot Matrix")
summary(fit)
fit <- lm(YearsPLE ~ YrsEducation + GPA + Age, data = df)
summary(fit)
anova(fit)
vif(fit)
fit <- lm(YearsPLE ~ YrsEducation + GPA + Age, data = df)
summary(fit)
vif(fit)
confit(fit)
confint(fit)
confint(fit, level = 0.95)
residuals(fit)
rm(list = ls())
df <- read_excel("DataRegression.xlsx", "Engines")
head(df)
rm(list = ls())
df <- read_excel("DataRegression.xlsx", "Defects")
df$MonthID <- seq(1,12,1)
names(df) <- c("MonthName", "y2010", "y2011", "y2012", "y2013", "y2014", "MonthID")
df$MonthName <- as.factor(df$MonthName)
?png
png("DefectPlot.png", width = 720, height = 480)
ggplot(df, aes(x = MonthID, y = y2010)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
dev.off()
rm(list = ls())
df <- read_excel("DataRegression.xlsx", "EmployeeRetenion")
df <- df[ ,1:4]
names(df)[3] <- "GPA"
summary(df)
pairs(~YearsPLE+YrsEducation+GPA+Age, data = df, main = "Scatter Plot Matrix")
png("scatterMatrixRetention.png")
pairs(~YearsPLE+YrsEducation+GPA+Age, data = df, main = "Scatter Plot Matrix")
dev.off()
fit <- lm(YearsPLE ~ YrsEducation + GPA + Age, data = df)
summary(fit)
vif(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
layout(matrix(c(1,1)))
png("diagnosticPlots.png")
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
layout(matrix(c(1,1)))
dev.off()
fit <- lm(YearsPLE ~ Age, data = df)
summary(fit)
vif(fit)
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
layout(matrix(c(1,1)))
anova(fit)
fit <- lm(YearsPLE ~ YrsEducation + GPA + Age, data = df)
anva(fit)
anova(fit)
fit <- lm(YearsPLE ~ Age, data = df)
summary(fit)
png("finalDiagnostic.png")
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(fit)
dev.off()
layout(matrix(c(1,1)))
rm(list = ls())
df <- read_excel("DataRegression.xlsx", "Engines")
head(df)
names(df) <- c("Sample", "Time")
ggplot(df, aes(x = Sample, y = Time)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
ggplot(df, aes(x = Sample, y = Time)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = lm, se = F) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
?geom_smooth
ggplot(df, aes(x = Sample, y = Time)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = 'auto', se = F) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
ggplot(df, aes(x = Sample, y = Time)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = 'auto', se = F) +
geom_smooth(method = lm, se = F) +
xlab("Month") + ylab("Defect Counts") + ggtitle("Defects in 2010")
ggplot(df, aes(x = Sample, y = Time)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = 'auto', se = F) +
geom_smooth(method = lm, se = F) +
xlab("Time (min)") + ylab("Sample Unit") + ggtitle("Learning Rate")
ggplot(df, aes(x = Sample, y = Time)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = 'auto', se = F) +
geom_smooth(method = lm, se = F) +
xlab("Sample Unit") + ylab("Time (min)") + ggtitle("Learning Rate")
png("learningRate.png")
ggplot(df, aes(x = Sample, y = Time)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = 'auto', se = F) +
geom_smooth(method = lm, se = F) +
xlab("Sample Unit") + ylab("Time (min)") + ggtitle("Learning Rate")
dev.off()
?geom_smooth
ggplot(df, aes(x = Sample, y = Time)) +
geom_point(shape = 1) + geom_line() +
geom_smooth(method = 'auto', se = F, show.legend = T) +
geom_smooth(method = lm, se = F) +
xlab("Sample Unit") + ylab("Time (min)") + ggtitle("Learning Rate")
